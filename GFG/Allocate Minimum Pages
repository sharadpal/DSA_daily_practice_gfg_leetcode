Examples:

Input: arr[] = [12, 34, 67, 90], k = 2
Output: 113
Explanation: Allocation can be done in following ways:
=> [12] and [34, 67, 90] Maximum Pages = 191
=> [12, 34] and [67, 90] Maximum Pages = 157
=> [12, 34, 67] and [90] Maximum Pages = 113.
The third combination has the minimum pages assigned to a student which is 113.
----------------------------------------------------------------------

class Solution {
    static boolean isAllocationPossible(int arr[], int maxPage,int student){
        int currStudent=1;
        int page=0;
        for(int i=0;i<arr.length;i++){
            page+=arr[i];
            if(page>maxPage){
                currStudent+=1;
                page=arr[i];
            }
            if(currStudent>student){
                return false;
            }
        }
        return true;
    }
    
    public int findPages(int[] arr, int k) {
        // code here
        if(arr.length<k) return -1;
        int start = Integer.MIN_VALUE;
        int end=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>start){
                start=arr[i];
            }
            end+=arr[i];
        }
        int res=-1;
        while(start<=end){
            int mid= start+(end-start)/2;
            if(isAllocationPossible(arr,mid,k)){
                res=mid;
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return res;
    }
}
