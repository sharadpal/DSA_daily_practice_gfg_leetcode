Examples :

Input: k = 2, node = 4

Output: 1
Explanation:
Since, k is 2 and node is 4, so we first need to locate the node and look k times its ancestors.
Here in this Case node 4 has 1 as his  2nd Ancestor aka the root of the tree.

--------------------------------------------------------------------------------------------

class Solution {
    static int ans = -1;
      public static int find(Node root, int k, int n) {
        
        if(root == null) {
            return -1;
        }
        
        if(root.data == n) {
            return 0;
        }
        
        int left = find(root.left, k, n);
        int right = find(root.right, k, n);
        
        if(left == -1 && right == -1) {
            return -1;
        }
        
        int max = Math.max(left, right);
        
        if(max + 1 == k) {
            ans = root.data;
        }
        
        return max + 1;
        
    }
    
    public int kthAncestor(Node root, int k, int node) {
        // Write your code here
        
        ans = -1;
        find(root, k, node);
        return ans;
    }
}
