Examples :
Input: arr[] = [-7, 9, 8, 3, 1, 1], target = 2
Output: 2
Explanation: There is only one triplet present in the array where elements are -7,8,1 whose sum is 2.
---------------------------------------------------------------------------------------------------------
import java.util.Arrays;

class Solution {
    static int threeSumClosest(int[] array, int target) {
        Arrays.sort(array);
        int resSum = array[0] + array[1] + array[2];
        int minDiff = Math.abs(resSum - target);

        for (int i = 0; i < array.length - 2; i++) {
            int left = i + 1;
            int right = array.length - 1;
            while (left < right) {
                int sum = array[i] + array[left] + array[right];
                if (sum == target) return target;
                int diffTarget = Math.abs(sum - target);
                if (diffTarget < minDiff || (diffTarget == minDiff && sum > resSum)) {
                    resSum = sum;
                    minDiff = diffTarget;
                }

                if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        return resSum;
    }
}
