Examples:

Input: LinkedList: 3->5->2->4->1
Output: 1->2->3->4->5

class Solution {
    // Function to sort the given linked list using Merge Sort
    private static Node getMid(Node head){
        Node slow= head;
        Node fast= head.next;
        while(fast!=null && fast.next!=null){
            slow= slow.next;
            fast=fast.next.next;
        }
        return slow;  // mid
    }
    private static Node merge(Node l1,Node l2){
        Node dummy = new Node(-1);
        Node current = dummy;

        while (l1 != null && l2 != null) {
            if (l1.data <= l2.data) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }
        // Attach remaining nodes
        current.next = (l1 != null) ? l1 : l2;
        return dummy.next;
    }
    static Node mergeSort(Node head) {
        if(head==null || head.next==null) return head;
        // find mid
        Node mid= getMid(head);
        // left & right merge sort
        Node rightHead=mid.next;
        mid.next=null;
        Node newLeft= mergeSort(head);
        Node newRight= mergeSort(rightHead);
        // return
        return merge(newLeft,newRight);
    }
}
