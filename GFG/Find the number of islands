NOTE- all include the diagonal then check the island

Input: grid = [[0,1,1,1,0,0,0],[0,0,1,1,0,1,0]]
Output: 2

////------------>>>>>>>>>>> CODE
class Solution {
    public void dfs(char grid[][],int i,int j){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]=='0'){
            return;
        }
        grid[i][j]='0';
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j-1);
        dfs(grid,i,j+1);
        dfs(grid,i-1,j+1);
        dfs(grid,i+1,j-1);
        dfs(grid,i-1,j-1);
        dfs(grid,i+1,j+1);
    }
    public int numIslands(char[][] grid) {
        // Code here 
        int count=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1'){
                    dfs(grid,i,j);
                    count++;
                }
            }
        }
        return count;
    }
}
