Input: n = 4
Output: [[2 4 1 3 ] [3 1 4 2 ]]
Explaination: There are 2 possible solutions for n = 4.

----------->>>>>>>>>> CODE----(HARD LEVEL)------------->>>>>>>>>
class Solution {
    public void generate(int[][] board, int row, ArrayList<ArrayList<Integer>> ans){
        if(row==board.length){
            ArrayList<Integer>temp= new ArrayList<>();
            for(int i=0;i<board.length;i++){
                for(int j=0;j<board[0].length;j++){
                    if(board[i][j]==1){
                        temp.add(j+1);
                    }
                }
            }
            ans.add(temp);
            return;
        }
        for(int col=0;col<board[0].length;col++)
        {
            if(isSafe(board, row, col))
            {
                board[row][col]=1;
                generate(board, row+1, ans);
                board[row][col]=0;
            }
        }
        
    }
    public boolean isSafe(int board[][],int row,int col){
        // vertical up
        for(int i=row;i>=0;i--){
            if(board[i][col]==1){
                return false;
            }
        }
        // diag left up
        for(int i=row, j=col;i>=0 && j>=0;i--,j--){
            if(board[i][j]==1){
                return false;
            }
        }
        // diag right up
        for(int i=row,j=col; i>=0 && j<board[0].length;i--,j++){
            if(board[i][j]==1){
                return false;
            }
        }
        return true;
    }
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        ArrayList<ArrayList<Integer>> ans= new ArrayList<>();
        int board[][]= new int[n][n];
        generate(board,0,ans);
        return ans;
        
    }
}
