Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping
intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

--------->>>>>>>>>>>>>>>.... CODE------>>>>>>>>>>>>
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length==1) return intervals;
        Arrays.sort(intervals,Comparator.comparingInt(i->i[0]));
        List<int[]> res= new ArrayList<>();
        int newIntervals[]= intervals[0];
        res.add(newIntervals);
        for(int[] interval:intervals){
            if(interval[0]<=newIntervals[1]){
                newIntervals[1]=Math.max(newIntervals[1],interval[1]);
            }else{
                newIntervals=interval;
                res.add(newIntervals);
            }
        }
        return res.toArray(new int[res.size()][]);
    }
}
