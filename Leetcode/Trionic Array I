Example 1:

Input: nums = [1,3,5,4,2,6]

Output: true

Explanation:

Pick p = 2, q = 4:

nums[0...2] = [1, 3, 5] is strictly increasing (1 < 3 < 5).
nums[2...4] = [5, 4, 2] is strictly decreasing (5 > 4 > 2).
nums[4...5] = [2, 6] is strictly increasing (2 < 6)
-----------------------------------------------------------------

class Solution {
    public boolean isTrionic(int[] nums) {
       int n = nums.length;

        // First increasing sequence must exist
        if (nums[1] <= nums[0]) return false;

        int i = 2;
        
        // First strictly increasing phase
        while (i < n && nums[i] > nums[i - 1]) i++;
        if (i == n) return false;

        // Strictly decreasing phase
        while (i < n && nums[i] < nums[i - 1]) i++;
        if (i == n) return false;

        // Final strictly increasing phase
        for (int k = i; k < n; k++) {
            if (nums[k] <= nums[k - 1]) return false;
        }

        return true; 
    }
}
