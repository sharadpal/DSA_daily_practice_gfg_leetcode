Input: plantTime = [1,4,3], growTime = [2,3,1]
Output: 9
Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.
One optimal way is:
On day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.
On days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.
On days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.
Thus, on day 9, all the seeds are blooming.

-------------->>>>>>>>>>>>>>>........ CODE---------------------------
class Solution {
    public int earliestFullBloom(int[] plantTime, int[] growTime) {
        int n = plantTime.length;
        Integer index[] = new Integer[n];
        for (int i = 0; i < n; i++) {
            index[i] = i;
        }
        
        // Sort indices based on growTime in descending order
        Arrays.sort(index, (i, j) -> growTime[j] - growTime[i]);
        
        int ans = 0, t = 0;
        for (int i : index) {
            t += plantTime[i]; // Add the plant time for the current plant
            ans = Math.max(ans, t + growTime[i]); // Calculate the maximum bloom time
        }
        
        return ans;
    }
}
